import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Users, Copy, Share2, Play, Settings } from 'lucide-react';
import { useToast } from '../hooks/use-toast';

const GameLobby = ({ onStartGame, onJoinGame, gameMode, setGameMode }) => {
  const [roomCode, setRoomCode] = useState('');
  const [playerName, setPlayerName] = useState('');
  const [currentRoom, setCurrentRoom] = useState(null);
  const [mockPlayers, setMockPlayers] = useState([]);
  const { toast } = useToast();

  // Mock data for demonstration
  const mockRoomData = {
    code: 'DELHI2024',
    host: 'рд░рд╛рдЬ Kumar',
    players: [
      { id: 1, name: 'рд░рд╛рдЬ Kumar', avatar: 'ЁЯд┤', ready: true, isHost: true },
      { id: 2, name: 'рдкреНрд░рд┐рдпрд╛ Singh', avatar: 'ЁЯС╕', ready: true, isHost: false },
      { id: 3, name: 'рдЕрдорд┐рдд Sharma', avatar: 'ЁЯзФ', ready: false, isHost: false }
    ],
    maxPlayers: 6,
    settings: {
      startingMoney: 15000,
      houseLimit: 32,
      hotelLimit: 12
    }
  };

  const avatars = ['ЁЯд┤', 'ЁЯС╕', 'ЁЯзФ', 'ЁЯСитАНЁЯОУ', 'ЁЯСйтАНЁЯТ╝', 'ЁЯзСтАНЁЯЪА', 'ЁЯСитАНЁЯОи', 'ЁЯСйтАНЁЯФм'];

  const createRoom = () => {
    if (!playerName.trim()) {
      toast({
        title: "рдирд╛рдо рдЖрд╡рд╢реНрдпрдХ рд╣реИ",
        description: "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
        variant: "destructive"
      });
      return;
    }

    // Mock room creation
    const newRoom = {
      ...mockRoomData,
      host: playerName,
      players: [{ 
        id: 1, 
        name: playerName, 
        avatar: avatars[Math.floor(Math.random() * avatars.length)], 
        ready: true, 
        isHost: true 
      }]
    };
    
    setCurrentRoom(newRoom);
    setMockPlayers(newRoom.players);
    
    toast({
      title: "рд░реВрдо рдмрдирд╛рдпрд╛ рдЧрдпрд╛!",
      description: `Room Code: ${newRoom.code}`,
    });
  };

  const joinRoom = () => {
    if (!playerName.trim() || !roomCode.trim()) {
      toast({
        title: "рд╡рд┐рд╡рд░рдг рдЖрд╡рд╢реНрдпрдХ рд╣реИ",
        description: "рдХреГрдкрдпрд╛ рдирд╛рдо рдФрд░ рд░реВрдо рдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ",
        variant: "destructive"
      });
      return;
    }

    // Mock joining
    const joinedRoom = {
      ...mockRoomData,
      players: [
        ...mockRoomData.players,
        { 
          id: Date.now(), 
          name: playerName, 
          avatar: avatars[Math.floor(Math.random() * avatars.length)], 
          ready: false, 
          isHost: false 
        }
      ]
    };
    
    setCurrentRoom(joinedRoom);
    setMockPlayers(joinedRoom.players);
    
    toast({
      title: "рд░реВрдо рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реБрдП!",
      description: `${roomCode} рд░реВрдо рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╢рд╛рдорд┐рд▓ рд╣реБрдП`,
    });
  };

  const copyRoomCode = () => {
    if (currentRoom) {
      navigator.clipboard.writeText(currentRoom.code);
      toast({
        title: "рдХреЙрдкреА рдХрд┐рдпрд╛ рдЧрдпрд╛!",
        description: "рд░реВрдо рдХреЛрдб рдХреНрд▓рд┐рдкрдмреЛрд░реНрдб рдореЗрдВ рдХреЙрдкреА рд╣реЛ рдЧрдпрд╛",
      });
    }
  };

  const toggleReady = () => {
    // Mock ready toggle
    setMockPlayers(prev => prev.map(player => 
      player.name === playerName 
        ? { ...player, ready: !player.ready }
        : player
    ));
  };

  const startGame = () => {
    onStartGame();
  };

  const isHost = currentRoom && mockPlayers.find(p => p.name === playerName)?.isHost;
  const allReady = mockPlayers.length >= 2 && mockPlayers.every(p => p.ready);

  if (currentRoom) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-green-50 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-orange-800 mb-2">ЁЯЗоЁЯЗ│ рднрд╛рд░рддреАрдп рд╣реЗрд░рд┐рдЯреЗрдЬ рдореЛрдиреЛрдкрд▓реА</h1>
            <p className="text-green-700">рдЦреЗрд▓ рд▓реЙрдмреА</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Room Info */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>рд░реВрдо: {currentRoom.code}</span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={copyRoomCode}
                    className="flex items-center gap-2"
                  >
                    <Copy className="w-4 h-4" />
                    рдХреЙрдкреА рдХрд░реЗрдВ
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {mockPlayers.map((player) => (
                    <div
                      key={player.id}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        player.ready 
                          ? 'border-green-500 bg-green-50' 
                          : 'border-orange-500 bg-orange-50'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-3xl mb-2">{player.avatar}</div>
                        <div className="font-semibold text-sm">{player.name}</div>
                        {player.isHost && (
                          <Badge variant="secondary" className="mt-1">рд╣реЛрд╕реНрдЯ</Badge>
                        )}
                        <Badge 
                          variant={player.ready ? "default" : "outline"}
                          className="mt-1"
                        >
                          {player.ready ? 'рддреИрдпрд╛рд░' : 'рдкреНрд░рддреАрдХреНрд╖рд╛ рдореЗрдВ'}
                        </Badge>
                      </div>
                    </div>
                  ))}
                  
                  {/* Empty slots */}
                  {Array.from({ length: currentRoom.maxPlayers - mockPlayers.length }).map((_, index) => (
                    <div
                      key={`empty-${index}`}
                      className="p-4 rounded-lg border-2 border-dashed border-gray-300 bg-gray-50"
                    >
                      <div className="text-center text-gray-400">
                        <Users className="w-8 h-8 mx-auto mb-2" />
                        <div className="text-xs">рдЦрд╛рд▓реА рд╕реНрд▓реЙрдЯ</div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Controls */}
            <Card>
              <CardHeader>
                <CardTitle>рдирд┐рдпрдВрддреНрд░рдг</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button
                  onClick={toggleReady}
                  variant={mockPlayers.find(p => p.name === playerName)?.ready ? "default" : "outline"}
                  className="w-full"
                >
                  {mockPlayers.find(p => p.name === playerName)?.ready ? 'рддреИрдпрд╛рд░ тЬУ' : 'рддреИрдпрд╛рд░ рд╣реЛреЗрдВ'}
                </Button>

                {isHost && (
                  <Button
                    onClick={startGame}
                    disabled={!allReady}
                    className="w-full bg-green-600 hover:bg-green-700"
                  >
                    <Play className="w-4 h-4 mr-2" />
                    рдЦреЗрд▓ рд╢реБрд░реВ рдХрд░реЗрдВ
                  </Button>
                )}

                <div className="text-sm text-gray-600 space-y-2">
                  <div><strong>рдЦрд┐рд▓рд╛рдбрд╝реА:</strong> {mockPlayers.length}/{currentRoom.maxPlayers}</div>
                  <div><strong>рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд░рд╛рд╢рд┐:</strong> тВ╣{currentRoom.settings.startingMoney.toLocaleString()}</div>
                  <div><strong>рдШрд░ рд╕реАрдорд╛:</strong> {currentRoom.settings.houseLimit}</div>
                </div>

                <Button
                  variant="outline"
                  onClick={() => setCurrentRoom(null)}
                  className="w-full"
                >
                  рд░реВрдо рдЫреЛрдбрд╝реЗрдВ
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Chat Section */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>рдЪреИрдЯ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-32 bg-gray-50 rounded p-3 mb-3 overflow-y-auto">
                <div className="text-sm text-gray-600 space-y-1">
                  <div><strong>System:</strong> {playerName} рд░реВрдо рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реБрдП</div>
                  <div><strong>рд░рд╛рдЬ Kumar:</strong> рдирдорд╕реНрддреЗ рд╕рднреА! рдЦреЗрд▓ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ ЁЯО▓</div>
                  <div><strong>рдкреНрд░рд┐рдпрд╛ Singh:</strong> рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдореИрдВ рддреИрдпрд╛рд░ рд╣реВрдБ ЁЯЗоЁЯЗ│</div>
                </div>
              </div>
              <div className="flex gap-2">
                <Input placeholder="рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..." className="flex-1" />
                <Button size="sm">рднреЗрдЬреЗрдВ</Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-green-50 p-4">
      <div className="max-w-2xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold text-orange-800 mb-4">ЁЯЗоЁЯЗ│ рднрд╛рд░рддреАрдп рд╣реЗрд░рд┐рдЯреЗрдЬ рдореЛрдиреЛрдкрд▓реА</h1>
          <p className="text-xl text-green-700 mb-2">рднрд╛рд░рдд рдХреЗ рд░рд╛рдЬреНрдпреЛрдВ рдФрд░ рд╢рд╣рд░реЛрдВ рдХреЗ рд╕рд╛рде рдЦреЗрд▓реЗрдВ</p>
          <p className="text-gray-600">рдСрдирд▓рд╛рдЗрди рдорд▓реНрдЯреАрдкреНрд▓реЗрдпрд░ рдЧреЗрдо</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Create Room */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5" />
                рдирдпрд╛ рд░реВрдо рдмрдирд╛рдПрдВ
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Input
                placeholder="рдЖрдкрдХрд╛ рдирд╛рдо"
                value={playerName}
                onChange={(e) => setPlayerName(e.target.value)}
              />
              <Button onClick={createRoom} className="w-full bg-orange-600 hover:bg-orange-700">
                рд░реВрдо рдмрдирд╛рдПрдВ
              </Button>
            </CardContent>
          </Card>

          {/* Join Room */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Share2 className="w-5 h-5" />
                рд░реВрдо рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Input
                placeholder="рдЖрдкрдХрд╛ рдирд╛рдо"
                value={playerName}
                onChange={(e) => setPlayerName(e.target.value)}
              />
              <Input
                placeholder="рд░реВрдо рдХреЛрдб"
                value={roomCode}
                onChange={(e) => setRoomCode(e.target.value.toUpperCase())}
              />
              <Button onClick={joinRoom} className="w-full bg-green-600 hover:bg-green-700">
                рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ
              </Button>
            </CardContent>
          </Card>
        </div>

        <Card className="mt-8">
          <CardHeader>
            <CardTitle>рдЦреЗрд▓ рдХреА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl mb-2">ЁЯО▓</div>
                <div className="text-sm font-semibold">рдПрдирд┐рдореЗрдЯреЗрдб рдбрд╛рдЗрд╕</div>
              </div>
              <div>
                <div className="text-2xl mb-2">ЁЯПа</div>
                <div className="text-sm font-semibold">рд╕рдВрдкрддреНрддрд┐ рдкреНрд░рдмрдВрдзрди</div>
              </div>
              <div>
                <div className="text-2xl mb-2">ЁЯдЭ</div>
                <div className="text-sm font-semibold">рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕рд┐рд╕реНрдЯрдо</div>
              </div>
              <div>
                <div className="text-2xl mb-2">ЁЯОн</div>
                <div className="text-sm font-semibold">рднрд╛рд░рддреАрдп рдХрд╛рд░реНрдб</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default GameLobby;